name: Check GTFS schedule version

on:
  schedule:
    - cron: "0 5 * * *"
  push:
    branches:
      - main
      - db-import-script

env:
  PREV_LAST_MODIFIED: ${{ vars.GTFS_LAST_MODIFIED }}
  IS_DEPLOY: "false"

jobs:
  get_headers:
    runs-on: ubuntu-latest
    outputs:
      lastModified: ${{ steps.setlastModified.outputs.lastModified }}
    steps:
      # - uses: actions/checkout@v3

      - name: Make get request
        id: getRequest
        uses: fjogeleit/http-request-action@v1
        with:
          url: "https://www.transportforireland.ie/transitData/Data/GTFS_All.zip"
          method: "GET"

      - name: Set last modified
        id: setlastModified
        run: |
          echo "lastModified='${{ fromJson(steps.getRequest.outputs.headers).last-modified }}'" >> "$GITHUB_OUTPUT"

      # Create file if it doesn't exist
      # - shell: bash
      #   run: |
      #     touch database_last_modified_date.txt
      #     value="${{ fromJson(steps.getRequest.outputs.headers).last-modified }}"
      #     echo "${value}" > database_last_modified_date.txt

  get-last-artifact:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # - uses: actions/setup-node@v3
      #   with:
      #     node-version: 18

      # - name: Install dependencies
      #   run: npm ci

      - name: Download artifact
        uses: actions/github-script@v6
        continue-on-error: true
        env:
          WORKFLOW_FILENAME: check-database-version.yml
          ARTIFACT_NAME: database_last_modified_date
          ARTIFACT_FILENAME: database_last_modified_date.zip
          UNZIP_DIR: artifact
        with:
          script: |
            const script = require('./.github/scripts/getArtifact.js')
            await script({github, context, core})

  test:
    needs: get_headers
    runs-on: ubuntu-latest
    permissions: read-all
    steps:
      - uses: actions/checkout@v3
      - env:
          LAST_MODIFIED: ${{needs.get_headers.outputs.lastModified}}
        run: echo $LAST_MODIFIED

      - shell: bash
        run: |

          value="cat artifact/database_last_modified_date.txt"
          echo "${value}"

      # - name: Get previous lastModified
      #   id: getPrevLastModified
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: database_last_modified_date

      # - name: REST API with curl
      #   run: |
      #     value="${LAST_MODIFIED}"
      #     curl -L \
      #     -X PATCH \
      #     -H "Accept: application/vnd.github+json" \
      #     -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
      #     -H "X-GitHub-Api-Version: 2022-11-28" \
      #     https://api.github.com/repos/${{ github.repository }}/actions/variables/GTFS_LAST_MODIFIED \
      #     -d '{"name":"GTFS_LAST_MODIFIED","value":"${value}"}'

      # - name: Print the final result
      #   shell: bash
      #   run: |
      #     newValue="${{ vars.GTFS_LAST_MODIFIED }}"
      #     echo The result is ${PREV_LAST_MODIFIED} ${newValue}

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: get_headers
  #   env:
  #     LAST_MODIFIED: ${{needs.get_headers.outputs.lastModified}}
  #   steps:
  #     - name: Set env IS_DEPLOY
  #       run: |
  #         if [[ $GITHUB_EVENT_NAME == 'push' || env.LAST_MODIFIED != env.PREV_LAST_MODIFIED ]]; then
  #           echo "IS_DEPLOY=true" >> "$GITHUB_ENV"
  #         else
  #           echo "IS_DEPLOY=false" >> "$GITHUB_ENV"
  #         fi

  #     - name: Skip Deploy?
  #       if: env.IS_DEPLOY != 'true'
  #       run: echo "No changes found for main or last_modifed. Deploy not triggered"

  #     - name: Set GTFS_LAST_MODIFIED env
  #       if: env.LAST_MODIFIED != env.PREV_LAST_MODIFIED
  #       run: echo "GTFS_LAST_MODIFIED=env.LAST_MODIFIED" >> "$GITHUB_ENV"

  # run: echo "ready to deploy" $LAST_MODIFIED $PREV_LAST_MODIFIED

  # - uses: actions/checkout@v2
  # - uses: superfly/flyctl-actions/setup-flyctl@master
  # - name: Deploy?
  #   if: env.IS_DEPLOY == 'true'
  #   run: flyctl deploy --remote-only --build-arg LAST_MODIFIED_HEADER="${env.LAST_MODIFIED}"
  #   env:
  #     FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
