name: Check GTFS schedule version

on:
  schedule:
    - cron: "0 5 * * *"
  push:
    branches:
      - main
      - db-import-script

env:
  PREV_LAST_MODIFIED: ${{ vars.GTFS_LAST_MODIFIED }}
  IS_DEPLOY: "false"

jobs:
  get_headers:
    runs-on: ubuntu-latest
    outputs:
      lastModified: ${{ steps.setlastModified.outputs.lastModified }}
    steps:
      - name: Make get request
        id: getRequest
        uses: fjogeleit/http-request-action@v1
        with:
          url: "https://www.transportforireland.ie/transitData/Data/GTFS_All.zip"
          method: "GET"

      - name: Set last modified
        id: setlastModified
        run: |
          echo "lastModified='${{ fromJson(steps.getRequest.outputs.headers).last-modified }}'" >> "$GITHUB_OUTPUT"

  # test:
  #   needs: get_headers
  #   runs-on: ubuntu-latest
  #   steps:
  #     - env:
  #         LAST_MODIFIED: ${{needs.get_headers.outputs.lastModified}}
  #       run: echo $LAST_MODIFIED $PREV_LAST_MODIFIED

  deploy:
    runs-on: ubuntu-latest
    needs: get_headers
    env:
      LAST_MODIFIED: ${{needs.get_headers.outputs.lastModified}}
    steps:
      - name: Set env IS_DEPLOY
        run: |
          if [[ $GITHUB_EVENT_NAME == 'push' || env.LAST_MODIFIED != env.PREV_LAST_MODIFIED ]]; then
            echo "IS_DEPLOY=true" >> "$GITHUB_ENV"
          else
            echo "IS_DEPLOY=false" >> "$GITHUB_ENV"
          fi

      - name: Skip Deploy?
        if: env.IS_DEPLOY != 'true'
        run: echo "No changes found for main or last_modifed. Deploy not triggered"

      - name: Set GTFS_LAST_MODIFIED env
        if: env.LAST_MODIFIED != env.PREV_LAST_MODIFIED
        run: echo "GTFS_LAST_MODIFIED=env.LAST_MODIFIED" >> "$GITHUB_ENV"

        # run: echo "ready to deploy" $LAST_MODIFIED $PREV_LAST_MODIFIED

      - uses: actions/checkout@v2
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Deploy?
        if: env.IS_DEPLOY == 'true'
        run: flyctl deploy --remote-only --build-arg LAST_MODIFIED_HEADER="${$LAST_MODIFIED}"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
